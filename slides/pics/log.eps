%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 118 575 673
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Sunday, September 20, 2020 11:56:30 AM CEST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
400 400 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
400.000 0 l
400.000 400.000 l
0 400.000 l
0 0 l
h
f
0 0 0 RG
1.50000 w
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
0 0 400 400 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 390 390 rc
1.00000 w
2 J
0 j
0 J
1 j
q
0.647059 0.647059 0.647059 RG
Q
2 J
0 j
0 J
1 j
q
0.647059 0.647059 0.647059 RG
Q
2 J
0 j
1.50000 w
0 J
1 j
q
q
3.00000 w
36.0000 -3.00000 348.981 396.000 rc
0.470588 0 0.0549020 RG
newpath
39.1411 780.000 m
39.1685 760.777 l
39.1685 760.777 l
39.2247 732.800 l
39.3371 693.368 l
39.4495 665.391 l
39.6742 625.960 l
39.8990 597.982 l
40.3485 558.551 l
40.7980 530.574 l
41.5802 495.447 l
42.3624 469.696 l
44.1218 428.770 l
45.8928 399.889 l
47.6554 377.744 l
49.2896 360.925 l
50.9817 346.119 l
52.7316 332.862 l
54.4760 321.232 l
56.2703 310.564 l
57.8507 302.049 l
59.6298 293.278 l
61.4163 285.201 l
63.1379 278.005 l
64.7012 271.902 l
66.5602 265.111 l
68.1350 259.707 l
69.9669 253.777 l
71.5884 248.813 l
73.3675 243.644 l
75.0616 238.965 l
76.8292 234.311 l
78.4524 230.225 l
80.2033 226.002 l
82.0219 221.802 l
83.6051 218.288 l
85.3149 214.629 l
87.0813 210.989 l
88.8094 207.555 l
90.4815 204.344 l
92.3380 200.899 l
94.0061 197.904 l
95.7872 194.805 l
97.4012 192.080 l
99.1656 189.185 l
100.825 186.538 l
102.561 183.846 l
104.258 181.284 l
106.034 178.672 l
107.745 176.221 l
109.494 173.777 l
111.229 171.413 l
112.823 169.290 l
114.651 166.912 l
116.285 164.833 l
118.028 162.665 l
119.695 160.634 l
121.547 158.427 l
123.151 156.556 l
124.971 154.475 l
126.630 152.617 l
128.444 150.624 l
130.010 148.936 l
131.793 147.049 l
133.515 145.261 l
135.236 143.506 l
136.951 141.788 l
138.599 140.166 l
140.380 138.443 l
142.077 136.828 l
143.863 135.157 l
145.481 133.669 l
147.268 132.050 l
148.980 130.524 l
150.687 129.026 l
152.471 127.485 l
154.114 126.087 l
155.796 124.676 l
157.654 123.141 l
159.336 121.773 l
161.056 120.392 l
162.805 119.008 l
164.413 117.753 l
166.127 116.433 l
167.828 115.141 l
169.648 113.777 l
171.254 112.589 l
173.106 111.236 l
174.778 110.031 l
176.432 108.854 l
178.211 107.603 l
179.997 106.363 l
181.622 105.249 l
183.347 104.079 l
185.032 102.951 l
186.857 101.743 l
188.437 100.710 l
190.251 99.5365 l
191.956 98.4461 l
193.645 97.3781 l
195.336 96.3209 l
197.060 95.2543 l
198.887 94.1363 l
200.563 93.1225 l
202.217 92.1319 l
203.985 91.0841 l
205.749 90.0497 l
207.333 89.1305 l
209.209 88.0528 l
210.778 87.1601 l
212.614 86.1263 l
214.366 85.1497 l
215.931 84.2860 l
217.690 83.3238 l
219.461 82.3646 l
221.224 81.4194 l
222.858 80.5512 l
224.550 79.6602 l
226.300 78.7473 l
228.044 77.8458 l
229.838 76.9272 l
231.419 76.1251 l
233.198 75.2301 l
234.985 74.3395 l
236.706 73.4890 l
238.269 72.7230 l
240.128 71.8200 l
241.703 71.0615 l
243.535 70.1865 l
245.157 69.4186 l
246.936 68.5830 l
248.630 67.7939 l
250.397 66.9773 l
252.021 66.2334 l
253.772 65.4374 l
255.590 64.6174 l
257.173 63.9091 l
258.883 63.1499 l
260.650 62.3718 l
262.378 61.6165 l
264.050 60.8913 l
265.906 60.0923 l
267.574 59.3800 l
269.355 58.6251 l
270.969 57.9461 l
272.734 57.2092 l
274.394 56.5209 l
276.130 55.8066 l
277.826 55.1132 l
279.603 54.3926 l
281.313 53.7035 l
283.063 53.0039 l
284.798 52.3150 l
286.392 51.6863 l
288.219 50.9706 l
289.854 50.3350 l
291.596 49.6618 l
293.264 49.0218 l
295.116 48.3161 l
296.719 47.7090 l
298.540 47.0246 l
300.198 46.4050 l
302.013 45.7318 l
303.578 45.1546 l
305.362 44.5015 l
307.084 43.8746 l
308.805 43.2523 l
310.520 42.6361 l
312.167 42.0478 l
313.948 41.4158 l
315.646 40.8173 l
317.432 40.1914 l
319.049 39.6282 l
320.836 39.0095 l
322.548 38.4206 l
324.256 37.8367 l
326.040 37.2305 l
327.682 36.6755 l
329.365 36.1103 l
331.223 35.4902 l
332.905 34.9320 l
334.625 34.3645 l
336.374 33.7908 l
337.982 33.2663 l
339.696 32.7104 l
341.397 32.1618 l
343.216 31.5784 l
344.822 31.0665 l
346.675 30.4791 l
348.347 29.9521 l
350.001 29.4335 l
351.780 28.8788 l
353.566 28.3251 l
355.190 27.8241 l
356.916 27.2947 l
358.600 26.7810 l
360.426 26.2270 l
362.005 25.7503 l
363.820 25.2056 l
365.525 24.6963 l
367.214 24.1946 l
368.904 23.6950 l
370.628 23.1881 l
372.456 22.6537 l
374.131 22.1662 l
375.785 21.6874 l
377.554 21.1782 l
379.318 20.6727 l
380.981 20.1986 l
S
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
Q
q
1.00000 w
2 J
0 j
q
0 J
1 j
newpath
39.0000 244.000 m
380.981 244.000 l
S
Q
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
203 269 13 15 rc
newpath
209.253 275.255 m
209.460 275.475 209.617 275.695 209.723 275.915  c
209.799 276.067 209.924 276.467 210.097 277.115  c
210.656 276.277 l
210.804 276.074 210.984 275.880 211.195 275.696  c
211.407 275.512 211.593 275.386 211.754 275.318  c
211.856 275.276 211.968 275.255 212.090 275.255  c
212.272 275.255 212.417 275.304 212.525 275.401  c
212.633 275.498 212.687 275.617 212.687 275.756  c
212.687 275.917 212.655 276.027 212.592 276.086  c
212.473 276.192 212.338 276.245 212.186 276.245  c
212.097 276.245 212.002 276.226 211.900 276.188  c
211.701 276.120 211.568 276.086 211.500 276.086  c
211.398 276.086 211.278 276.146 211.138 276.264  c
210.876 276.484 210.563 276.910 210.199 277.540  c
210.719 279.724 l
210.800 280.058 210.867 280.258 210.922 280.324  c
210.977 280.389 211.032 280.422 211.087 280.422  c
211.176 280.422 211.280 280.373 211.398 280.276  c
211.631 280.081 211.830 279.827 211.995 279.514  c
212.217 279.628 l
211.951 280.128 211.612 280.543 211.202 280.873  c
210.969 281.059 210.772 281.152 210.611 281.152  c
210.374 281.152 210.186 281.019 210.046 280.752  c
209.958 280.587 209.773 279.876 209.494 278.619  c
208.834 279.766 208.305 280.504 207.907 280.835  c
207.649 281.046 207.399 281.152 207.158 281.152  c
206.989 281.152 206.835 281.091 206.695 280.968  c
206.593 280.875 206.543 280.750 206.543 280.593  c
206.543 280.454 206.589 280.337 206.682 280.244  c
206.775 280.151 206.890 280.105 207.025 280.105  c
207.160 280.105 207.304 280.172 207.457 280.308  c
207.567 280.405 207.651 280.454 207.710 280.454  c
207.761 280.454 207.827 280.420 207.907 280.352  c
208.106 280.191 208.377 279.844 208.720 279.311  c
209.063 278.778 209.287 278.393 209.393 278.156  c
209.130 277.127 208.988 276.584 208.967 276.524  c
208.870 276.249 208.743 276.055 208.586 275.940  c
208.430 275.826 208.199 275.769 207.895 275.769  c
207.797 275.769 207.685 275.773 207.558 275.782  c
207.558 275.553 l
h
f
Q
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 w
1.00000 w
2 J
0 j
newpath
39.0000 244.000 m
39.0000 248.000 l
S
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
107.000 244.000 m
107.000 248.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
115.335 267.960 m
114.593 270.000 l
108.343 270.000 l
108.343 269.710 l
110.182 268.033 111.476 266.664 112.226 265.601  c
112.976 264.539 113.351 263.567 113.351 262.687  c
113.351 262.015 113.145 261.463 112.734 261.031  c
112.322 260.599 111.830 260.382 111.257 260.382  c
110.737 260.382 110.269 260.535 109.855 260.839  c
109.441 261.144 109.135 261.591 108.937 262.179  c
108.648 262.179 l
108.778 261.216 109.113 260.476 109.652 259.960  c
110.191 259.445 110.864 259.187 111.671 259.187  c
112.531 259.187 113.248 259.463 113.824 260.015  c
114.399 260.567 114.687 261.218 114.687 261.968  c
114.687 262.505 114.562 263.041 114.312 263.578  c
113.927 264.421 113.302 265.315 112.437 266.257  c
111.140 267.674 110.330 268.528 110.007 268.820  c
112.773 268.820 l
113.335 268.820 113.730 268.799 113.957 268.757  c
114.183 268.716 114.388 268.631 114.570 268.503  c
114.752 268.376 114.911 268.195 115.046 267.960  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
176.000 244.000 m
176.000 248.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
183.445 266.093 m
183.445 267.203 l
182.023 267.203 l
182.023 270.000 l
180.734 270.000 l
180.734 267.203 l
176.250 267.203 l
176.250 266.203 l
181.164 259.187 l
182.023 259.187 l
182.023 266.093 l
h
180.734 266.093 m
180.734 260.835 l
177.015 266.093 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
244.000 244.000 m
244.000 248.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
252.171 259.187 m
252.171 259.476 l
251.484 259.544 250.923 259.681 250.488 259.886  c
250.053 260.092 249.623 260.406 249.199 260.828  c
248.774 261.250 248.423 261.720 248.144 262.238  c
247.865 262.756 247.632 263.372 247.445 264.085  c
248.195 263.570 248.947 263.312 249.703 263.312  c
250.427 263.312 251.054 263.604 251.585 264.187  c
252.117 264.770 252.382 265.520 252.382 266.437  c
252.382 267.322 252.114 268.130 251.578 268.859  c
250.932 269.744 250.078 270.187 249.015 270.187  c
248.291 270.187 247.677 269.947 247.171 269.468  c
246.182 268.536 245.687 267.328 245.687 265.843  c
245.687 264.895 245.877 263.994 246.257 263.140  c
246.638 262.286 247.181 261.528 247.886 260.867  c
248.592 260.205 249.268 259.760 249.914 259.531  c
250.559 259.302 251.161 259.187 251.718 259.187  c
h
247.312 264.656 m
247.218 265.359 247.171 265.927 247.171 266.359  c
247.171 266.859 247.264 267.402 247.449 267.988  c
247.634 268.574 247.908 269.039 248.273 269.382  c
248.539 269.627 248.862 269.750 249.242 269.750  c
249.695 269.750 250.100 269.536 250.457 269.109  c
250.813 268.682 250.992 268.072 250.992 267.281  c
250.992 266.390 250.815 265.619 250.460 264.968  c
250.106 264.317 249.604 263.992 248.953 263.992  c
248.755 263.992 248.543 264.033 248.316 264.117  c
248.089 264.200 247.755 264.380 247.312 264.656  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
313.000 244.000 m
313.000 248.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
316.070 264.664 m
315.231 263.976 314.691 263.424 314.449 263.007  c
314.207 262.591 314.085 262.158 314.085 261.710  c
314.085 261.023 314.351 260.431 314.882 259.933  c
315.414 259.436 316.119 259.187 317.000 259.187  c
317.854 259.187 318.541 259.419 319.062 259.882  c
319.583 260.346 319.843 260.875 319.843 261.468  c
319.843 261.864 319.703 262.268 319.421 262.679  c
319.140 263.091 318.554 263.575 317.664 264.132  c
318.580 264.841 319.187 265.398 319.484 265.804  c
319.880 266.335 320.078 266.895 320.078 267.484  c
320.078 268.229 319.794 268.865 319.226 269.394  c
318.658 269.923 317.914 270.187 316.992 270.187  c
315.987 270.187 315.203 269.872 314.640 269.242  c
314.192 268.737 313.968 268.184 313.968 267.585  c
313.968 267.117 314.126 266.652 314.441 266.191  c
314.756 265.730 315.299 265.221 316.070 264.664  c
h
317.296 263.828 m
317.921 263.265 318.317 262.821 318.484 262.496  c
318.651 262.170 318.734 261.802 318.734 261.390  c
318.734 260.843 318.580 260.415 318.273 260.105  c
317.966 259.795 317.546 259.640 317.015 259.640  c
316.484 259.640 316.052 259.794 315.718 260.101  c
315.385 260.408 315.218 260.768 315.218 261.179  c
315.218 261.450 315.287 261.721 315.425 261.992  c
315.563 262.263 315.760 262.520 316.015 262.765  c
h
316.437 264.960 m
316.005 265.325 315.684 265.722 315.476 266.152  c
315.268 266.582 315.164 267.046 315.164 267.546  c
315.164 268.218 315.347 268.756 315.714 269.160  c
316.082 269.563 316.549 269.765 317.117 269.765  c
317.679 269.765 318.130 269.606 318.468 269.289  c
318.807 268.971 318.976 268.585 318.976 268.132  c
318.976 267.757 318.877 267.421 318.679 267.125  c
318.309 266.572 317.562 265.851 316.437 264.960  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
381.000 244.000 m
381.000 248.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
378.875 260.445 m
381.453 259.187 l
381.710 259.187 l
381.710 268.132 l
381.710 268.726 381.735 269.096 381.785 269.242  c
381.834 269.388 381.937 269.500 382.093 269.578  c
382.250 269.656 382.567 269.700 383.046 269.710  c
383.046 270.000 l
379.062 270.000 l
379.062 269.710 l
379.562 269.700 379.885 269.657 380.031 269.582  c
380.177 269.506 380.278 269.404 380.335 269.277  c
380.393 269.149 380.421 268.768 380.421 268.132  c
380.421 262.414 l
380.421 261.643 380.395 261.148 380.343 260.929  c
380.307 260.763 380.240 260.640 380.144 260.562  c
380.048 260.484 379.932 260.445 379.796 260.445  c
379.604 260.445 379.335 260.526 378.992 260.687  c
h
385.578 264.765 m
385.578 263.557 385.760 262.516 386.125 261.644  c
386.489 260.772 386.974 260.122 387.578 259.695  c
388.046 259.356 388.531 259.187 389.031 259.187  c
389.843 259.187 390.572 259.601 391.218 260.429  c
392.026 261.455 392.429 262.846 392.429 264.601  c
392.429 265.830 392.252 266.875 391.898 267.734  c
391.544 268.593 391.092 269.217 390.543 269.605  c
389.993 269.993 389.463 270.187 388.953 270.187  c
387.942 270.187 387.101 269.591 386.429 268.398  c
385.862 267.393 385.578 266.182 385.578 264.765  c
h
387.109 264.960 m
387.109 266.419 387.289 267.609 387.648 268.531  c
387.945 269.307 388.388 269.695 388.976 269.695  c
389.257 269.695 389.549 269.569 389.851 269.316  c
390.153 269.063 390.382 268.640 390.539 268.046  c
390.778 267.151 390.898 265.888 390.898 264.257  c
390.898 263.049 390.773 262.041 390.523 261.234  c
390.335 260.635 390.093 260.210 389.796 259.960  c
389.583 259.789 389.325 259.703 389.023 259.703  c
388.669 259.703 388.354 259.862 388.078 260.179  c
387.703 260.612 387.447 261.291 387.312 262.218  c
387.177 263.145 387.109 264.059 387.109 264.960  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
73.0000 244.000 m
73.0000 246.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
142.000 244.000 m
142.000 246.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
210.000 244.000 m
210.000 246.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
278.000 244.000 m
278.000 246.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
347.000 244.000 m
347.000 246.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
Q
2 J
0 j
q
0 J
1 j
newpath
39.0000 390.000 m
39.0000 1.00000 l
S
Q
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
1 115 8 15 rc
Q
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 w
1.00000 w
2 J
0 j
newpath
39.0000 341.000 m
35.0000 341.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
18 339 9 16 rc
newpath
31.2812 347.609 m
20.7187 347.609 l
20.7187 346.781 l
31.2812 346.781 l
31.2812 347.609 l
h
f
Q
newpath
30.8750 342.445 m
33.4531 341.187 l
33.7109 341.187 l
33.7109 350.132 l
33.7109 350.726 33.7356 351.096 33.7851 351.242  c
33.8346 351.388 33.9375 351.500 34.0937 351.578  c
34.2500 351.656 34.5677 351.700 35.0468 351.710  c
35.0468 352.000 l
31.0625 352.000 l
31.0625 351.710 l
31.5625 351.700 31.8854 351.657 32.0312 351.582  c
32.1770 351.506 32.2786 351.404 32.3359 351.277  c
32.3932 351.149 32.4218 350.768 32.4218 350.132  c
32.4218 344.414 l
32.4218 343.643 32.3958 343.148 32.3437 342.929  c
32.3072 342.763 32.2408 342.640 32.1445 342.562  c
32.0481 342.484 31.9322 342.445 31.7968 342.445  c
31.6041 342.445 31.3359 342.526 30.9921 342.687  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
39.0000 244.000 m
35.0000 244.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
29.5781 249.765 m
29.5781 248.557 29.7604 247.516 30.1250 246.644  c
30.4895 245.772 30.9739 245.122 31.5781 244.695  c
32.0468 244.356 32.5312 244.187 33.0312 244.187  c
33.8437 244.187 34.5729 244.601 35.2187 245.429  c
36.0260 246.455 36.4296 247.846 36.4296 249.601  c
36.4296 250.830 36.2526 251.875 35.8984 252.734  c
35.5442 253.593 35.0924 254.217 34.5429 254.605  c
33.9934 254.993 33.4635 255.187 32.9531 255.187  c
31.9427 255.187 31.1015 254.591 30.4296 253.398  c
29.8619 252.393 29.5781 251.182 29.5781 249.765  c
h
31.1093 249.960 m
31.1093 251.419 31.2890 252.609 31.6484 253.531  c
31.9453 254.307 32.3880 254.695 32.9765 254.695  c
33.2578 254.695 33.5494 254.569 33.8515 254.316  c
34.1536 254.063 34.3828 253.640 34.5390 253.046  c
34.7786 252.151 34.8984 250.888 34.8984 249.257  c
34.8984 248.049 34.7734 247.041 34.5234 246.234  c
34.3359 245.635 34.0937 245.210 33.7968 244.960  c
33.5833 244.789 33.3255 244.703 33.0234 244.703  c
32.6692 244.703 32.3541 244.862 32.0781 245.179  c
31.7031 245.612 31.4479 246.291 31.3125 247.218  c
31.1770 248.145 31.1093 249.059 31.1093 249.960  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
39.0000 147.000 m
35.0000 147.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
30.8750 147.445 m
33.4531 146.187 l
33.7109 146.187 l
33.7109 155.132 l
33.7109 155.726 33.7356 156.096 33.7851 156.242  c
33.8346 156.388 33.9375 156.500 34.0937 156.578  c
34.2500 156.656 34.5677 156.700 35.0468 156.710  c
35.0468 157.000 l
31.0625 157.000 l
31.0625 156.710 l
31.5625 156.700 31.8854 156.657 32.0312 156.582  c
32.1770 156.506 32.2786 156.404 32.3359 156.277  c
32.3932 156.149 32.4218 155.768 32.4218 155.132  c
32.4218 149.414 l
32.4218 148.643 32.3958 148.148 32.3437 147.929  c
32.3072 147.763 32.2408 147.640 32.1445 147.562  c
32.0481 147.484 31.9322 147.445 31.7968 147.445  c
31.6041 147.445 31.3359 147.526 30.9921 147.687  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
39.0000 50.0000 m
35.0000 50.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
36.3359 57.9609 m
35.5937 60.0000 l
29.3437 60.0000 l
29.3437 59.7109 l
31.1822 58.0338 32.4765 56.6640 33.2265 55.6015  c
33.9765 54.5390 34.3515 53.5677 34.3515 52.6875  c
34.3515 52.0156 34.1458 51.4635 33.7343 51.0312  c
33.3229 50.5989 32.8307 50.3828 32.2578 50.3828  c
31.7369 50.3828 31.2695 50.5351 30.8554 50.8398  c
30.4414 51.1445 30.1354 51.5911 29.9375 52.1796  c
29.6484 52.1796 l
29.7786 51.2161 30.1132 50.4765 30.6523 49.9609  c
31.1914 49.4453 31.8645 49.1875 32.6718 49.1875  c
33.5312 49.1875 34.2487 49.4635 34.8242 50.0156  c
35.3997 50.5677 35.6875 51.2187 35.6875 51.9687  c
35.6875 52.5052 35.5625 53.0416 35.3125 53.5781  c
34.9270 54.4218 34.3020 55.3151 33.4375 56.2578  c
32.1406 57.6744 31.3307 58.5286 31.0078 58.8203  c
33.7734 58.8203 l
34.3359 58.8203 34.7304 58.7994 34.9570 58.7578  c
35.1835 58.7161 35.3880 58.6315 35.5703 58.5039  c
35.7526 58.3763 35.9114 58.1953 36.0468 57.9609  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
39.0000 293.000 m
37.0000 293.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
39.0000 196.000 m
37.0000 196.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
39.0000 98.0000 m
37.0000 98.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
39.0000 1.00000 m
37.0000 1.00000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
Q
2 J
0 j
Q
Q
cliprestore
0 0 400 400 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
1.00000 w
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
